{"version":3,"sources":["assets/styles/GlobalStyle.ts","assets/styles/theme.ts","components/Toggle.tsx","App.tsx","assets/hooks/useDarkMode.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","normalize","theme","mode","mainBackground","text","dark","borderColor","toggleShadow","toggleHover","hoverText","light","Wrapper","styled","button","ToggleImg","img","Toggle","themeMode","toggleTheme","onClick","src","App","useState","setTheme","useEffect","localTheme","window","localStorage","getItem","setItem","useDarkMode","Container","div","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAGaA,EAAcC,4BAAH,8WAClBC,KAGgB,qBAAGC,MAAkBC,KAAKC,kBAC/B,qBAAGF,MAAkBC,KAAKE,QCR9BC,EAAO,CAClBF,eAAgB,UAChBG,YAAa,oBACbF,KAAM,UACNG,aAAc,gEACdC,YAAa,4BACbC,UAAW,WAGAC,EAAQ,CACnBP,eAAgB,UAChBG,YAAa,oBACbF,KAAM,UACNG,aACE,4EACFC,YAAa,yBACbC,UAAW,W,OCEPE,EAAUC,UAAOC,OAAV,waACG,qBAAGZ,MAAkBC,KAAKC,kBAC/B,qBAAGF,MAAkBC,KAAKE,QAKzB,qBAAGH,MAAkBC,KAAKI,eAQtB,qBAAGL,MAAkBC,KAAKK,gBAGxB,qBAAGN,MAAkBC,KAAKM,eAE/B,qBAAGP,MAAkBC,KAAKO,aAIjCK,EAAYF,UAAOG,IAAV,6DAKAC,EAvCA,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,YAC3B,OACE,cAACP,EAAD,CAASQ,QAASD,EAAlB,SACE,cAACJ,EAAD,CACEM,IAAmB,UAAdH,EAAwB,gBAAkB,oBCUxCI,MAff,WACE,MCNyB,WACzB,MAA0BC,mBAAS,SAAnC,mBAAOrB,EAAP,KAAcsB,EAAd,KAgBA,OALAC,qBAAU,WACR,IAAMC,EAAaC,OAAOC,aAAaC,QAAQ,SAC/CH,GAAcF,EAASE,KACtB,IAEI,CAACxB,EAfY,WACJ,UAAVA,GACFyB,OAAOC,aAAaE,QAAQ,QAAS,QACrCN,EAAS,UAETG,OAAOC,aAAaE,QAAQ,QAAS,SACrCN,EAAS,YDFoBO,GAAjC,mBAAOb,EAAP,KAAkBC,EAAlB,KACMjB,EAAsB,UAAdgB,EAAwB,CAAEf,KAAMQ,GAAU,CAAER,KAAMG,GAEhE,OACE,eAAC,gBAAD,CAAeJ,MAAOA,EAAtB,UACE,cAACH,EAAD,IACA,eAACiC,EAAD,WACE,6CACA,cAAC,EAAD,CAAQd,UAAWA,EAAWC,YAAaA,WAQ7Ca,EAAYnB,UAAOoB,IAAV,qEACO,qBAAG/B,MAAkBC,KAAKC,kBACrC,qBAAEF,MAAiBC,KAAKE,QEtBnC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e0acf4d0.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport normalize from \"styled-normalize\";\n\nexport const GlobalStyle = createGlobalStyle`\n    ${normalize}\n    \n    body{\n        background: ${({ theme }) => theme.mode.mainBackground};\n        color: ${({ theme }) => theme.mode.text};\n        position: relative;\n        display: block;\n        width: 100%;\n        height: 100%;\n        line-height: 1.5;\n        margin: 0 auto;\n        word-break: keep-all;\n        word-wrap: break-word;\n        text-rendering: optimizeLegibility;\n    }\n`;\n","export const dark = {\n  mainBackground: \"#1E1E22\",\n  borderColor: \"1px solid #2c2d33\",\n  text: \"#FFFFFF\",\n  toggleShadow: \"0px 5px 10px rgba(0,0,0, 0.35), 0px 2px 3px rgba(0,0,0, 0.35)\",\n  toggleHover: \"rgba(248, 247, 244, 0.35)\",\n  hoverText: \"#FFFFFF\",\n};\n\nexport const light = {\n  mainBackground: \"#F8F7F4\",\n  borderColor: \"1px solid #eaeaea\",\n  text: \"#31302E\",\n  toggleShadow:\n    \"0 5px 10px rgba(100, 100, 100, 0.35), 0 2px 4px rgba(100, 100, 100, 0.35)\",\n  toggleHover: \"rgba(30, 30, 34, 0.85)\",\n  hoverText: \"#FFFFFF\",\n};\n\nexport const theme = { dark, light };\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface ToggleBtn {\n  themeMode: string;\n  toggleTheme: () => void;\n}\n\nconst Toggle = ({ themeMode, toggleTheme }: ToggleBtn) => {\n  return (\n    <Wrapper onClick={toggleTheme}>\n      <ToggleImg\n        src={themeMode === \"light\" ? \"/img/moon.png\" : \"/img/sun.png\"}\n      />\n    </Wrapper>\n  ); \n};\n\nconst Wrapper = styled.button`\n  background: ${({ theme }) => theme.mode.mainBackground};\n  color: ${({ theme }) => theme.mode.text};\n  position: fixed;\n  z-index: 999999;\n  bottom: 4%;\n  right: 3%;\n  border: ${({ theme }) => theme.mode.borderColor};\n  font-size: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 96px;\n  height: 48px;\n  border-radius: 30px;\n  box-shadow: ${({ theme }) => theme.mode.toggleShadow};\n  cursor: pointer;\n  &:hover {\n    background: ${({ theme }) => theme.mode.toggleHover};\n    border-color: transparent;\n    color: ${({ theme }) => theme.mode.hoverText};\n  }\n`;\n\nconst ToggleImg = styled.img`\n  width: 20px;\n  height: 20px;\n`;\n\nexport default Toggle;\n\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./assets/styles/GlobalStyle\";\nimport { useDarkMode } from \"./assets/hooks/useDarkMode\";\nimport { dark, light } from \"./assets/styles/theme\";\nimport Toggle from \"./components/Toggle\";\n\nfunction App() {\n  const [themeMode, toggleTheme] = useDarkMode();\n  const theme = themeMode === \"light\" ? { mode: light } : { mode: dark };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Container>\n        <h1>darkMode-ts</h1>\n        <Toggle themeMode={themeMode} toggleTheme={toggleTheme} />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.mode.mainBackground};\n  color: ${({theme}) => theme.mode.text};\n`;\n","import { useState, useEffect } from \"react\";\n\nexport const useDarkMode = (): [string, () => void] => {\n  const [theme, setTheme] = useState(\"light\");\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      window.localStorage.setItem(\"theme\", \"dark\");\n      setTheme(\"dark\");\n    } else {\n      window.localStorage.setItem(\"theme\", \"light\");\n      setTheme(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme && setTheme(localTheme);\n  }, []);\n\n  return [theme, toggleTheme];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}